最多的单词

描述
统计一段文本中出现次数最多的英文单词。单词不区分大小写，即“Hello”和“hello”表示同一个单词。单词和单词之间由一个或多个非字母字符隔开。

输入
输入数据为一段文本，可能包含若干行，直到文件末尾(EOF)为止。即只有一组测试用例。

输出
输出该段文本中出现最多的单词(全变换成小写字母)，及该单词出现的次数，中间用空格隔开。如果出现次数最多的单词有多个，输出字典序最大(全转换成小写字母比较)的那个。

样例1
输入
Is this a   very hard problem?
No, it is not!
	
输出
is 2

样例2
输入
I like   computer.   I like Computer Science.
I like School   of Computer Science.
I like   Sichuan University.

输出	
like 4

提示
如果用getchar()或者scanf()函数读入数据，那么当返回 EOF 时表示已经读取到文件末尾。
如果用gets()函数读入数据，那么返回NULL时表示已经读取到文件末尾。

#include<stdio.h>
#include<string.h>
int judge(int l,char *c,int m,int n);
int main(){
	char f[1000]={NULL},c;
	int n=0;
	while(scanf("%c",&c)!=EOF){
		f[n]=c;
		n++;
	}
	int l=strlen(f),m=-1,ff=0,f1=0;
	for(int i=0;i<l;i++){
		if(f[i]>='A'&&f[i]<='Z'){
			f[i]+='a'-'A';
		}
	}
	int ii,nw=0,mm=0;
	for(int i=0;i<l;i++){
		int k=0;
		if(f[i]<'A'||f[i]>'z'){
			k=i-m-1;
			if(k){
				f1=judge(l,f,k,m+1);
				if(f1>ff){
					ff=f1;
					ii=m+1;
					mm=k;
				}
				else if(f1==ff){
					char tem1[k],tem2[mm];
					for(int j=0;j<k;j++){
						tem1[j]=f[m+1+j];
					}
					for(int j=0;j<mm;j++){
						tem2[j]=f[ii];
					}
					(strcmp(tem1,tem2)<0)?(ii=ii,mm=mm):(ii=m+1,mm=k);
				}
			}
			m=i;
		}
	}
	char final[mm+1]={NULL};
	for(int i=0;i<mm;i++){
		final[i]=f[ii+i];
	}
	printf("%s %d",final,ff);
	return 0;
}
int judge(int l,char *c,int m,int n){
	char a[m]={NULL};
	int f=0;
	for(int i=0;i<m;i++){
		a[i]=c[n+i];
	}
	for(int i=0;i<l;i++){
		if(a[0]==c[i]&&(c[i-1]>'z'||c[i-1]<'A')){
			for(int j=0;j<m;j++){
				if(a[j]!=c[i+j]){
					break;
				}
				if(j==m-1&&(c[i+j+1]>'z'||c[i+j+1]<'A')){
					f++;
				}
			}
		}
	}
	return f;
}

 
